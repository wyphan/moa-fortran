#! -*- mode: f90; -*-
#:include "../common/common.fypp"
#:include "mod_testing.fypp"
!===============================================================================
! Unit test for "Gamma" offset functions
! Last edited: Oct 26, 2021 (WYP)
!===============================================================================
PROGRAM testgamma

  USE ISO_FORTRAN_ENV, ONLY: u => output_unit

  USE mod_prec
  USE moa
  IMPLICIT NONE

  INTEGER, PARAMETER :: maxdim = 18

  INTEGER(KIND=dl) :: r
  INTEGER :: i
  INTEGER :: a(0:maxdim-1), b(0:maxdim-1)

#! Macro to print Gamma function enum and name to stdout
#:def moa_gamma_print(layout)
  WRITE(u,'("- ", I0, ": ", A)') ${layout}$%enum, ${layout}$%name
#:enddef moa_gamma_print

  !-----------------------------------------------------------------------------
  ! Print all available Gamma offset functions
  !-----------------------------------------------------------------------------

  WRITE(u,'(A)') 'The family of Gamma offset functions:'
  @:moa_gamma_print(moa_gamma_row)
  @:moa_gamma_print(moa_gamma_col)
  WRITE(u,*)

  !-----------------------------------------------------------------------------
  ! Test error messages
  !-----------------------------------------------------------------------------

  WRITE(u,'("Test error message for non-conformable shapes")')

  WRITE(u,'("Gamma( <0, 0>, <2> )")')
  r = moa_gamma( [0,0], [2] )
  WRITE(u,'("Return value = ", I0)' r
  WRITE(u,*)

#:for k1, t1 in INT_KINDS_TYPES
  WRITE(u,'("Test error message for out-of-bounds access, ${t1}$ type")')

  WRITE(u,'("Gamma( <69>, <42> )")')
  r = moa_gamma( [ 69_${k1}$ ], [ 42_${k1}$ ] )
  WRITE(u,'("Return value = ", I0)' r
  WRITE(u,*)

  WRITE(u,'("Gamma( <3, 7>, <4, 5> )")')
  r = moa_gamma( [ 3_${k1}$, 7_${k1}$ ], [ 4_${k1}$, 5_${k1}$ ] )
  WRITE(u,'("Return value = ", I0)' r
  WRITE(u,*)
#:endfor

  !-----------------------------------------------------------------------------
  ! Test for empty shape vector
  !-----------------------------------------------------------------------------

  WRITE(u,'("Test for empty shape")')

  @:save_gold( "Gamma( <>, <> )", 0 )
  r = moa_gamma( [], [] )
  @:check_exact( r )
  WRITE(u,*)

#:for k1, t1 in INT_KINDS_TYPES
  !-----------------------------------------------------------------------------
  ! Test for ${t1} type
  !-----------------------------------------------------------------------------

  ! Test for 1-element vectors
  WRITE(u,'("Test for vectors of ${t1}$ type")')

  @:save_gold( "Gamma( <41>, <42> )", 41 )
  r = moa_gamma( [ 41_${k1}$ ], [ 42_${k1}$ ] )
  @:check_exact( r )
  WRITE(u,*)

  WRITE(u,'("Test for matrices of ${t1}$ type")')
  a(0:1) = [ 2_${k1}$, 3_${k1}$ ]
  b(0:1) = [ 4_${k1}$, 5_${k1}$ ]

  @:save_gold( "Gamma_row( <2, 3>, <4, 5> )", 13 )
  r = moa_gamma( a(0:1), b(0:1) )
  @:check_exact( r )

  @:save_gold( "Gamma_col( <2, 3>, <4, 5> )", 14 )
  r = moa_gamma( a(0:1), b(0:1), layout=mod_gamma_col )
  @:check_exact( r )
  WRITE(u,*)

  WRITE(u,'("Test for 3-D arrays of ${t1}$ type")')
  a(0:2) = [ 0_${k1}$, 1_${k1}$, 2_${k1}$ ]
  b(0:2) = [ 2_${k1}$, 3_${k1}$, 4_${k1}$ ]

  @:save_gold( "Gamma_row( <0, 1, 2>, <2, 3, 4> )", 6 )
  r = moa_gamma( a(0:2), b(0:2) )
  @:check_exact( r )

  @:save_gold( "Gamma_col( <0, 1, 2>, <2, 3, 4> )", 14 )
  r = moa_gamma( a(0:2), b(0:2), layout=mod_gamma_col )
  @:check_exact( r )

  WRITE(u,'("Test for ",I0,"-D arrays of ${t1}$ type")') maxdim
  a(i) = [ 1, i = 0, maxdim-1 ]
  b(i) = [ 2, i = 0, maxdim-1 ]

  @:save_gold( "Gamma_row( <1, ..., 1>, <2, ..., 2> )", 2**maxdim - 1 )
  r = moa_gamma( a, b )
  @:check_exact( r )

  @:save_gold( "Gamma_col( <1, ..., 1>, <2, ..., 2> )", 2**maxdim - 1 )
  r = moa_gamma( a, b, layout=mod_gamma_col )
  @:check_exact( r )

#:endfor

@:mem_linux('Memory usage:')

  STOP
END PROGRAM testgamma
